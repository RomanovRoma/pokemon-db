{"version":3,"sources":["components/pokemon-list-item/index.js","components/pokemon-list-item/pokemon-list-item.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/pokemon-service-context/pokemon-service-context.js","components/hoc/with-pokemon-service.js","actions/index.js","utils/compose.js","components/pokemon-list/pokemon-list.js","components/pages/home-page.js","services/pokemon-service.js","components/pokemon-details/index.js","components/pokemon-details/pokemon-details.js","components/pages/pokemon-page.js","components/type-details/index.js","components/type-details/type-details.js","components/pages/type-ability-page.js","components/pokemon-search/index.js","components/pokemon-search/pokemon-search.js","components/pages/pokemon-search-page.js","components/header/index.js","components/header/header.js","components/ability-details/index.js","components/ability-details/ability-details.js","components/app/index.js","components/app/app.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","reducers/pokemon-list.js","reducers/pokemon-details.js","reducers/index.js","store.js","index.js"],"names":["PokemonListItem","newId","pokemon","id","name","numToStr","String","length","className","src","alt","charAt","toUpperCase","slice","Spinner","ErrorIndicator","href","React","createContext","PokemonServiceProvider","Provider","PokemonServiceConsumer","Consumer","withPokemonService","Wrapped","props","pokemonService","fetchAllPokemons","dispatch","type","getAllPokemons","then","data","payload","catch","err","compose","func","comp","reduceRight","wrapped","f","PokemonList","this","pokemons","loading","error","map","onClick","onPokemonSelected","Component","connect","pokemonList","withRouter","history","pokemonName","push","PokemonService","_apiBase","_transformType","class","move_damage_class","generation","_transformAbility","ability","effect","effect_entries","_transformPokemons","url","match","_transformPokemon","experience","base_experience","height","weight","types","abilities","stats","fetch","res","json","getResource","results","abilityName","typeName","PokemonDetails","state","getPokemon","setState","updatePokemon","prevProps","it","index","array","onTypeSelected","onAbilitySelected","TypeDetails","getType","updateType","PokemonSearch","useState","value","setValue","useHistory","useEffect","listener","event","code","document","addEventListener","removeEventListener","placeholder","onChange","target","toLowerCase","Header","to","AbilityDetails","getAbility","updateAbility","language","App","role","path","component","HomePage","exact","render","params","ErrorBoundry","hasError","children","updatePokemonList","action","undefined","updatePokemonDetails","pokemonDetails","reducer","store","createStore","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.4432dd39.chunk.js","sourcesContent":["import PokemonListItem from './pokemon-list-item'\n\nexport default PokemonListItem","import React from 'react'\nimport './pokemon-list-item.css'\n\nconst PokemonListItem = ({ pokemon }) => {\n  const { id, name } = pokemon;\n  const numToStr = String(id);\n  let newId;\n  if (numToStr.length === 1) {\n    newId =  '00' + numToStr;\n  } else if (numToStr.length === 2) {\n    newId =  '0' + numToStr;\n  } else {\n    newId = numToStr;\n  }\n    return (\n      <div className=\"pokemon-list-item\">\n        <div className=\"pokemon-img\">\n          <img\n            className=\"pokemon-image\"\n            src={`https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/${newId}.png`}\n            alt={name}\n          />\n        </div>\n        <div className=\"pokemon-details\">\n          <div className=\"pokemon-name\">\n            <h2>{name.charAt(0).toUpperCase() + name.slice(1)}</h2>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nexport default PokemonListItem","import React from 'react'\n\nimport './spinner.css'\n\nconst Spinner = () => {\n  return (\n    <div className=\"loadingio-spinner-spinner-3oqlumcrxit\">\n      <div className=\"ldio-mzy1cv9q2v9\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Spinner","import ErrorIndicator from './error-indicator'\n\nexport default ErrorIndicator","import React from 'react'\nimport './error-indicator.css'\n\nconst ErrorIndicator = () => {\n  return (\n    <div className=\"page-wrap d-flex flex-row align-items-center\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-12 text-center\">\n            <span className=\"display-1 d-block\">404</span>\n            <div className=\"mb-4 lead\">\n              The page you are looking for was not found.\n            </div>\n            <a href=\"/pokemon-db/\" className=\"btn btn-link\">\n              Back to Home\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ErrorIndicator","import React from 'react'\n\nconst {\n  Provider: PokemonServiceProvider,\n  Consumer: PokemonServiceConsumer\n} = React.createContext()\n\nexport {\n  PokemonServiceProvider,\n  PokemonServiceConsumer\n}","import React from 'react'\nimport { PokemonServiceConsumer } from '../pokemon-service-context'\n\n\nconst withPokemonService = () => (Wrapped) => {\n\n  return (props) => {\n    return (\n      <PokemonServiceConsumer>\n        {\n          (pokemonService) => {\n            return (<Wrapped {...props}\n                      pokemonService={pokemonService} />)\n          }\n        }\n      </PokemonServiceConsumer>\n    )\n  }\n}\n\nexport default withPokemonService","\nconst fetchAllPokemonsSuccess = (newPokemons) => {\n  return {\n    type: 'FETCH_ALL_POKEMONS_SUCCESS',\n    payload: newPokemons\n  }\n}\n\nconst fetchAllPokemonsRequest = () => {\n  return {\n    type: 'FETCH_ALL_POKEMONS_REQUEST'\n  };\n}\n\nconst fetchAllPokemonsFailure = (error) => {\n  return {\n    type: \"FETCH_ALL_POKEMONS_FAILURE\",\n    payload: error\n  };\n}\n\nconst fetchAllPokemons = (pokemonService, dispatch) => () => {\n  dispatch(fetchAllPokemonsRequest());\n  pokemonService\n    .getAllPokemons()\n    .then((data) => dispatch(fetchAllPokemonsSuccess(data)))\n    .catch((err) => dispatch(fetchAllPokemonsFailure(err)));\n};\n\n\nconst fetchPokemonSuccess = (newPokemon) => {\n  return {\n    type: \"FETCH_POKEMON_SUCCESS\",\n    payload: newPokemon,\n  };\n};\n\nconst fetchPokemonRequest = () => {\n  return {\n    type: \"FETCH_POKEMON_REQUEST\",\n  };\n};\n\nconst fetchPokemonFailure = (error) => {\n  return {\n    type: \"FETCH_POKEMON_FAILURE\",\n    payload: error,\n  };\n};\n\nconst fetchPokemon = (pokemonService, dispatch) => (id) => {\n  dispatch(fetchPokemonRequest())\n    pokemonService.getPokemon(id)\n      .then((data) => dispatch(fetchPokemonSuccess(data)))\n      .catch((err) => dispatch(fetchPokemonFailure(err)));\n};\n\nexport {\n  fetchAllPokemons,\n  fetchPokemon\n};","const compose = (...func) => (comp) => {\n  return func.reduceRight((wrapped, f) => f(wrapped), comp);\n};\n\nexport default compose;","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport PokemonListItem from '../pokemon-list-item'\nimport Spinner from \"../spinner/spinner\";\nimport ErrorIndicator from \"../error-indicator\";\n\nimport { withPokemonService } from '../hoc'\nimport { fetchAllPokemons } from \"../../actions\";\nimport { compose } from '../../utils'\nimport './pokemon-list.css'\n\nclass PokemonList extends Component {\n\n  componentDidMount() {\n    this.props.fetchAllPokemons()\n  }\n\n  render() {\n\n    const { pokemons, loading, error } = this.props\n\n    if (loading) {\n      return <Spinner />\n    }\n\n    if (error) {\n      return <ErrorIndicator />\n    }\n\n    return (\n      <ul className=\"item-list list-group\">\n        <span className=\"item-list list-group\">Select a pokemon from list</span>\n        {pokemons.map((pokemon) => {\n          return (\n            <li\n              className=\"list-group-item\"\n              key={pokemon.name}\n              onClick={() => this.props.onPokemonSelected(pokemon.name)}\n            >\n              <PokemonListItem\n                pokemon={pokemon}\n                // onClick={() => this.props.onPokemonSelected(pokemon.name)}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = ({ pokemonList: {pokemons, loading, error} }) => {\n  return { pokemons, loading, error }\n}\n\nconst mapDispatchToProps = (dispatch, {pokemonService}) => {\n  return {\n    fetchAllPokemons: fetchAllPokemons(pokemonService, dispatch)\n  }\n}\n\nexport default compose(\n  withPokemonService(),\n  connect(mapStateToProps, mapDispatchToProps)\n)(PokemonList)","import React from 'react'\nimport PokemonList from '../pokemon-list/pokemon-list'\nimport { withRouter } from 'react-router-dom'\n\nconst HomePage = ({history}) => {\n  return (\n    <div className=\"col-md-6\">\n      <PokemonList\n        onPokemonSelected={(pokemonName) => {\n          history.push(`/pokemon/${pokemonName}`);\n        }} />\n    </div>\n  );\n}\n\nexport default withRouter(HomePage)","export default class PokemonService {\n  _apiBase = \"https://pokeapi.co/api/v2\";\n\n  async getResource(url) {\n    // debugger\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    // if (!res.ok || Math.random() > 0.75) {\n    //   throw new Error(`Could not fetch ${url}, received ${res.status}`);\n    // }\n    return await res.json();\n  }\n\n  async getAllPokemons() {\n    const res = await this.getResource(`/pokemon/`);\n    return res.results.map(this._transformPokemons);\n  }\n\n  async getPokemon(pokemonName) {\n    const pokemon = await this.getResource(`/pokemon/${pokemonName}/`);\n    return this._transformPokemon(pokemon);\n  }\n\n  async getAbility(abilityName) {\n    const ability = await this.getResource(`/ability/${abilityName}/`);\n    return this._transformAbility(ability);\n  }\n\n  async getType(typeName) {\n    const type = await this.getResource(`/type/${typeName}/`);\n    return this._transformType(type);\n  }\n\n  _transformType = (type) => {\n    return {\n      id: type.id,\n      name: type.name,\n      class: type.move_damage_class,\n      generation: type.generation,\n      pokemon: type.pokemon,\n    };\n  };\n\n  _transformAbility = (ability) => {\n    return {\n      id: ability.id,\n      name: ability.name,\n      effect: ability.effect_entries,\n    };\n  };\n\n  _transformPokemons = (pokemon) => {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    const id = pokemon.url.match(idRegExp)[1];\n\n    return {\n      id,\n      name: pokemon.name,\n    };\n  };\n\n  _transformPokemon = (pokemon) => {\n    return {\n      id: pokemon.id,\n      name: pokemon.name,\n      experience: pokemon.base_experience,\n      height: pokemon.height,\n      weight: pokemon.weight,\n      types: pokemon.types,\n      abilities: pokemon.abilities,\n      stats: pokemon.stats,\n    };\n  };\n}","import PokemonDetails from './pokemon-details'\n\nexport default PokemonDetails","import React, { Component } from 'react'\n// import { connect } from 'react-redux'\n// import { withPokemonService } from '../hoc'\n// import { fetchPokemon } from '../../actions'\n// import { compose } from '../../utils'\nimport PokemonService from \"../../services/pokemon-service\";\n\n// import ErrorIndicator from '../error-indicator/error-indicator'\nimport Spinner from '../spinner/spinner'\nimport './pokemon-details.css'\n\nclass PokemonDetails extends Component {\n  pokemonService = new PokemonService();\n\n  state = {\n    pokemon: {\n      id: '',\n      name: '',\n      experience: '',\n      height: '',\n      weight: '',\n      types: [],\n      abilities: [],\n    },\n  };\n\n  updatePokemon() {\n    const { pokemonName } = this.props;\n    if (!pokemonName) {\n      return;\n    }\n\n    this.pokemonService.getPokemon(pokemonName).then((pokemon) => {\n      this.setState({\n        pokemon,\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updatePokemon();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.pokemonName !== prevProps.pokemonName) {\n      this.updatePokemon();\n    }\n  }\n\n  render() {\n\n    const {id, name, experience, height, weight, types, abilities} = this.state.pokemon;\n\n    const numToStr = String(id);\n    let newId;\n    if (numToStr.length === 1) {\n      newId = \"00\" + numToStr;\n    } else if (numToStr.length === 2) {\n      newId = \"0\" + numToStr;\n    } else {\n      newId = numToStr;\n    }\n\n    return this.state.pokemon ? (\n      <div className=\"pokemon-details card\">\n        <img\n          className=\"pokemon-image\"\n          src={`https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/${newId}.png`}\n          alt={\n            name.charAt(0).toUpperCase() +\n            name.slice(1)\n          }\n        />\n\n        <div className=\"card-body\">\n          <h3>\n            {name.charAt(0).toUpperCase() +\n              name.slice(1)}\n          </h3>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              <span className=\"term\">Base Experience</span>\n              <span>{experience}</span>\n            </li>\n            <li className=\"list-group-item\">\n              <span className=\"term\">Height</span>\n              <span>{height}</span>\n            </li>\n            <li className=\"list-group-item\">\n              <span className=\"term\">Weight</span>\n              <span>{weight}</span>\n            </li>\n            <li className=\"list-group-item\">\n              <span className=\"term\">Types</span>\n              <ul>\n                {types.map((it, index, array) => {\n                  return (\n                    <li className=\"list-group-item\" key={it.type.name}>\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={() => this.props.onTypeSelected(it.type.name)}\n                      >\n                        {it.type.name}\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </li>\n            <li className=\"list-group-item\">\n              <span className=\"term\">Abilities</span>\n              <ul>\n                {abilities.map((it, type, array) => {\n                  return (\n                    <li className=\"list-group-item\" key={it.ability.name}>\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={() =>\n                          this.props.onAbilitySelected(it.ability.name)\n                        }\n                      >\n                        {it.ability.name}\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </li>\n          </ul>\n        </div>\n      </div>\n    ) : (\n      <Spinner />\n    );\n  }\n}\nexport default PokemonDetails","import React from 'react'\nimport PokemonDetails from '../pokemon-details'\nimport { withRouter } from \"react-router-dom\";\n\nconst PokemonPage = (props) => {\n\n  return (\n    <div className=\"col-md-6\">\n      <PokemonDetails\n        pokemonName={props.pokemonName}\n        onAbilitySelected={(abilityName) => {\n          props.history.push(`/ability/${abilityName}`);\n        }}\n        onTypeSelected={(typeName) => {\n          props.history.push(`/type/${typeName}`);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default withRouter(PokemonPage)\n","import TypeDetails from \"./type-details\";\n\nexport default TypeDetails;\n","import React, { Component } from \"react\";\nimport PokemonService from \"../../services/pokemon-service\";\nimport Spinner from \"../spinner/spinner\";\nimport \"./type-details.css\";\n\nclass TypeDetails extends Component {\n  pokemonService = new PokemonService();\n\n  state = {\n    type: null,\n  };\n\n  updateType() {\n    const { typeName } = this.props;\n    if (!typeName) {\n      return;\n    }\n\n    this.pokemonService.getType(typeName).then((type) => {\n      this.setState({\n        type,\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateType();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.typeName !== prevProps.typeName) {\n      this.updateType();\n    }\n  }\n\n  render() {\n    return this.state.type ? (\n      <div className=\"pokemon-details card\">\n        <h2>\n          <span>Type of pokemon:</span>\n          <br />\n          <span>\n            {this.state.type.name.charAt(0).toUpperCase() +\n              this.state.type.name.slice(1)}\n          </span>\n        </h2>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <ul>\n              {this.state.type.pokemon.map((it, type, array) => {\n                return (\n                  <li className=\"list-group-item\" key={it.pokemon.name}>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-primary\"\n                      onClick={() =>\n                        this.props.onPokemonSelected(it.pokemon.name)\n                      }\n                    >\n                      {it.pokemon.name.charAt(0).toUpperCase() +\n                        it.pokemon.name.slice(1)}\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </li>\n        </ul>\n      </div>\n    ) : (\n      <Spinner />\n    );\n  }\n}\n\nexport default TypeDetails;\n\n// return this.state.ability ? (\n//   <div className=\"pokemon-details card\">\n//     <h2>\n//       {this.state.ability.name.charAt(0).toUpperCase() +\n//         this.state.ability.name.slice(1)}\n//     </h2>\n//     <ul className=\"list-group list-group-flush\">\n//       <li className=\"list-group-item\">\n//         {this.state.ability.effect.map((it, type, array) => {\n//           return (\n//             <li className=\"list-group-item\" key={it.effect}>\n//               <h3>Language {it.language.name}:</h3>\n//               <span>{it.effect}</span>\n//             </li>\n//           );\n//         })}\n//       </li>\n//     </ul>\n//   </div>\n// ) : (\n//   <Spinner />\n// );\n","import React from \"react\";\nimport TypeDetails from \"../type-details\";\nimport { withRouter } from \"react-router-dom\";\n\nconst TypeAbilityPage = (props) => {\n  return (\n    <div className=\"col-md-6\">\n      <TypeDetails\n        typeName={props.typeName}\n        onPokemonSelected={(pokemonName) => {\n          props.history.push(`/pokemon/${pokemonName}`);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(TypeAbilityPage);\n","import PokemonSearch from \"./pokemon-search\";\n\nexport default PokemonSearch;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nconst PokemonSearch = (props) => {\n  const [value, setValue] = useState(\"\");\n  const history = useHistory();\n\n  const onChange = (event) => {\n    setValue(event.target.value.toLowerCase());\n  };\n\n  useEffect(() => {\n    const listener = (event) => {\n      if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n        history.push(`/pokemon/${value}`);\n      }\n    };\n    document.addEventListener(\"keydown\", listener);\n    return () => {\n      document.removeEventListener(\"keydown\", listener);\n    };\n  });\n\n  return (\n    <div>\n      <div>\n        <div>\n          <label className=\"col-form-label\">\n            Pokemon's name\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"pokemon's name\"\n            pokemon={value}\n            onChange={onChange}\n          />\n          <button\n            id=\"search-button\"\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => props.onPokemonSelected(value)}\n          >\n            Search\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonSearch;\n","import React from \"react\";\nimport PokemonSearch from \"../pokemon-search\";\nimport { withRouter } from \"react-router-dom\";\n\n\nconst PokemonSearchPage = (props) => {\n  return (\n    <div className=\"col-md-6\">\n      <PokemonSearch\n        typeName={props.typeName}\n        onPokemonSelected={(pokemonName) => {\n          props.history.push(`/pokemon/${pokemonName}`);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(PokemonSearchPage);\n","import Header from './header'\n\nexport default Header","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport PokemonSearchPage from '../pages/pokemon-search-page'\nimport './header.css'\n\nconst Header = () => {\n  return (\n    <div className=\"header d-flex\">\n      <Link to=\"/pokemon-db/\">\n        <div className=\"logo\" href=\"#\">\n          Pokemon DB\n        </div>\n        <div>Click on the link \"Pokemon DB\" to get a list of Pokemon</div>\n      </Link>\n      <PokemonSearchPage />\n    </div>\n  );\n}\n\nexport default Header","import AbilityDetails from './ability-details'\n\nexport default AbilityDetails","import React, { Component } from \"react\";\nimport PokemonService from \"../../services/pokemon-service\";\nimport Spinner from \"../spinner/spinner\";\nimport \"./ability-details.css\";\n\nclass AbilityDetails extends Component {\n  pokemonService = new PokemonService();\n\n  state = {\n    ability: null,\n  };\n\n  updateAbility() {\n    const { abilityName } = this.props;\n    if (!abilityName) {\n      return;\n    }\n\n    this.pokemonService.getAbility(abilityName).then((ability) => {\n      this.setState({\n        ability,\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateAbility();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.abilityName !== prevProps.abilityName) {\n      this.updateAbility();\n    }\n  }\n\n  render() {\n    return this.state.ability ? (\n      <div className=\"pokemon-details card\">\n        <h2>\n          <span>Description of ability:</span>\n          <div>\n            {this.state.ability.name.charAt(0).toUpperCase() +\n              this.state.ability.name.slice(1)}\n          </div>\n        </h2>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <ul>\n              {this.state.ability.effect.map((it, type, array) => {\n                return (\n                  <li className=\"list-group-item\" key={it.effect}>\n                    <h3>Language ({it.language.name}):</h3>\n                    <span>{it.effect}</span>\n                  </li>\n                );\n              })}\n            </ul>\n          </li>\n        </ul>\n      </div>\n    ) : (\n      <Spinner />\n    );\n  }\n}\n\nexport default AbilityDetails","import App from './app'\n\nexport default App","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { HomePage, PokemonPage, TypeAbilityPage } from '../pages'\n\nimport Header from '../header'\nimport AbilityDetails from '../ability-details'\n\nimport './app.css'\n\n\nconst App = () => {\n  return (\n    <main role=\"main\" className=\"container\">\n      <Header />\n      <div className=\"row mb2\">\n        <Switch>\n          <Route path=\"/pokemon-db/\" component={HomePage} exact />\n          <Route\n            path=\"/pokemon/:name\"\n            render={({ match }) => {\n              const { name } = match.params;\n              return <PokemonPage pokemonName={name} />;\n            }}\n          />\n          <Route\n            path=\"/ability/:ability\"\n            render={({ match }) => {\n              const { ability } = match.params;\n              return <AbilityDetails abilityName={ability} />;\n            }}\n          />\n          <Route\n            path=\"/type/:type\"\n            render={({ match }) => {\n              const { type } = match.params;\n              return <TypeAbilityPage typeName={type} />;\n            }}\n          />\n        </Switch>\n      </div>\n    </main>\n  );\n}\n\nexport default App","import ErrorBoundry from './error-boundry'\n\nexport default ErrorBoundry","import React, { Component } from 'react'\nimport ErrorIndicator from '../error-indicator'\n\nexport default class ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  }\n\n  componentDidCatch() {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return this.props.children\n  }\n}","const updatePokemonList = (state, action) => {\n  if (state === undefined) {\n    return {\n      pokemons: [],\n      loading: true,\n      error: null,\n    };\n  }\n\n  switch (action.type) {\n    case \"FETCH_ALL_POKEMONS_REQUEST\":\n      return {\n        pokemons: [],\n        loading: true,\n        error: null,\n      };\n    case \"FETCH_ALL_POKEMONS_SUCCESS\":\n      return {\n        pokemons: action.payload,\n        loading: false,\n        error: null,\n      };\n    case \"FETCH_ALL_POKEMONS_FAILURE\":\n      return {\n        pokemons: [],\n        loading: false,\n        error: action.payload,\n      };\n\n    default:\n      return state.pokemonList;\n  }\n};\n\nexport default updatePokemonList\n","const updatePokemonDetails = (state, action) => {\n  if (state === undefined) {\n    return {\n      pokemon: {},\n      loading: true,\n      error: null,\n    };\n  }\n\n  switch (action.type) {\n    case \"FETCH_POKEMON_REQUEST\":\n      return {\n        pokemon: {},\n        loading: true,\n        error: null,\n      };\n    case \"FETCH_POKEMON_SUCCESS\":\n      return {\n        pokemon: action.payload,\n        loading: false,\n        error: null,\n      };\n    case \"FETCH_POKEMON_FAILURE\":\n      return {\n        pokemon: {},\n        loading: false,\n        error: action.payload,\n      };\n\n    default:\n      return state.pokemonDetails;\n  }\n};\n\nexport default updatePokemonDetails\n","import updatePokemonList from './pokemon-list'\nimport updatePokemonDetails from './pokemon-details'\n\nconst reducer = (state, action) => {\n\n  return {\n    pokemonList: updatePokemonList(state, action),\n    pokemonDetails: updatePokemonDetails(state, action)\n  }\n}\n\nexport default reducer","import { createStore } from 'redux'\n\nimport reducer from './reducers'\n\nconst store = createStore(reducer)\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router } from 'react-router-dom'\n\nimport App from \"./components/app\";\nimport ErrorBoundry from './components/error-boundry'\nimport PokemonService from './services/pokemon-service'\nimport { PokemonServiceProvider } from './components/pokemon-service-context'\nimport store from './store'\n\nconst pokemonService = new PokemonService()\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ErrorBoundry>\n      <PokemonServiceProvider value={pokemonService}>\n        <Router>\n          <App />\n        </Router>\n      </PokemonServiceProvider>\n    </ErrorBoundry>\n  </Provider>\n  , document.getElementById(\"root\"));"],"sourceRoot":""}